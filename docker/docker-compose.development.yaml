name: ${CLIENT_NAME}-site

services:
  app:
    container_name: ${CLIENT_NAME}-frontend
    networks:
      - strapi
    build:
      context: ../app
      dockerfile: Dockerfile.development
    ports:
      - "3120:3000"
    working_dir: /app
    command: sh -cx "rsync -ar /node_cache/app/node_modules/. /app/node_modules/ && npm run dev"
    volumes:
      - ../app:/app
    env_file:
      - .development.env
    environment:
      HOST: 0.0.0.0
      PORT: 3000
    depends_on:
      cms:
        condition: service_healthy
  cms:
    container_name: ${CLIENT_NAME}-cms
    networks:
      - strapi
    env_file:
      - .development.env
    environment:
      HOST: 0.0.0.0
      PORT: 1337
    build:
      context: ../cms
      dockerfile: Dockerfile.development
    ports:
      - "3121:1337"
    working_dir: /cms
    command: sh -cx "rsync -ar /node_cache/cms/node_modules/. /cms/node_modules/ && npm run dev"
    volumes:
      - ../cms:/cms/
    depends_on:
      - db
    healthcheck:
      test: curl -f http://localhost:1337 || exit 1
      retries: 10
      interval: 15s
      timeout: 10s
  db:
    container_name: ${CLIENT_NAME}-db
    networks:
      - strapi
    image: postgres:18-alpine
    ports:
      - "3122:5432"
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      HOST: 0.0.0.0
      PORT: 5432
    env_file:
      - .development.env
    volumes:
      # as of 18-alpine this is the new mount dir
      - db_data:/var/lib/postgresql/
    restart: unless-stopped

volumes:
  db_data:


networks:
  strapi:
    name: strapi
    driver: bridge
